//Question 61: Making Enums for Vehicles: Let's create categories for vehicles like cars, trucks, and motorcycles using enums, and show one example.
// Making a list (enum) for different types of vehicles

enum VehicleCategories {
    Car,
    Truck,
    Motorcycle
}

// Showing one type of vehicle from the list
console.log(VehicleCategories.Car); // It shows 0 because enums start counting from 0
// Here, we're just checking what number the Car category got in our list.
console.log(VehicleCategories.Truck);
//// Here, we're just checking what number the Truck category got in our list.
console.log(VehicleCategories.Motorcycle);
//// Here, we're just checking what number the Motorcycle category got in our list.

// Question 62: Making a Student Template: Create a blueprint for student information, including their name, age, and the classes they're taking, and then fill in this blueprint with an example student.


interface StudentBluePrint {
    name: string;
    age: number;
    education: string[];
}

let student: StudentBluePrint = {
    name: "Fatimak",
    age: 18,
    education: ['Coding', 'AI', 'Finances']

};

console.log(student);

//Question 63: Shape Shifter: Write a program that can describe either a circle or a rectangle using a special type alias, including properties unique to each shape.

// Creating a custom type (type alias) for shapes that could be circles or rectangles
type Shapes = {
    kind: "circle" | "rectangle";
    radius?: number; // Only for circles
    width?: number; // Only for rectangles
    height?: number; // Only for rectangles
};

// Describing a circle using our Shape type
let circle: Shapes = {
    kind: "circle",
    radius: 5
};

// Describing a rectangle using our Shape type
let rectangle: Shapes = {
    kind: "rectangle",
    width: 10,
    height: 20
};

// Showing what we described
console.log(circle); // Here's the circle
console.log(rectangle); // And here's the rectangle
// We made a flexible program that can describe different shapes in detail.

